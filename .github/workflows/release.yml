name: Generate and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install cantools
        run: |
          python -m pip install --upgrade pip
          pip install cantools

      - name: Test DBC
        run: |
          python run_tests.py

      - name: Generate C source from DBC
        run: |
          mkdir -p src/
          python -m cantools generate_c_source r3.dbc --output-directory src/
          python -m cantools generate_c_source tcs.dbc --output-directory src/
          echo "Generated C source files from DBC."

      - name: Determine new version
        id: version
        run: |
          git fetch --tags

          # Get the latest version
          LATEST_TAG=$(git tag -l | sort -V | tail -n 1)

          # If no tags exist, default to 1
          if [ -z "$LATEST_TAG" ]; then
            VERSION="1"
          else
            # Increment the version
            VERSION_NUMBER=$(echo $LATEST_TAG | sed 's/^//')
            VERSION_NUMBER=$((VERSION_NUMBER + 1))
            VERSION="$VERSION_NUMBER"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Determined version: $VERSION"

      - name: Create new Git tag
        run: |
          git tag ${{ env.VERSION }}
          git push origin ${{ env.VERSION }}

      - name: Update library.json with new version
        run: |
          jq '.version = env.VERSION' library.json > library.tmp.json && mv library.tmp.json library.json
          cat library.json

      - name: Commit and push generated source and version update
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add src/ library.json
          git commit -m "Auto-generate C source and set version $VERSION" || echo "No changes to commit"
          git push

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          commit: main
          draft: false
          prerelease: false
          generateReleaseNotes: true

      - name: Upload generated C files to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            src/r3.c
            src/r3.h
            src/tcs.c
            src/tcs.h
          tag_name: ${{ env.VERSION }}
          fail_on_unmatched_files: true
